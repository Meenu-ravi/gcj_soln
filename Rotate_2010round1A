Problem
In the exciting game of Join-K, red and blue pieces are dropped into
an N-by-N table. The table stands up vertically so that pieces drop
down to the bottom-most empty slots in their column. For example,
consider the following two configurations:
    - Legal Position -
          .......
          .......
          .......
          ....R..
          ...RB..
          ..BRB..
          .RBBR..
   - Illegal Position -
          .......
          .......
          .......
          .......
   Bad -> ..BR...
          ...R...
          .RBBR..
In these pictures, each '.' represents an empty slot, each 'R'
represents a slot filled with a red piece, and each 'B' represents a
slot filled with a blue piece. The left configuration is legal, but
the right one is not. This is because one of the pieces in the third
column (marked with the arrow) has not fallen down to the empty slot
below it.
A player wins if they can place at least K pieces of their color in a
row, either horizontally, vertically, or diagonally. The four possible
orientations are shown below:
      - Four in a row -
     R   RRRR    R   R
     R          R     R
     R         R       R
     R        R         R	
In the "Legal Position" diagram at the beginning of the problem
statement, both players had lined up two pieces in a row, but not
three. As it turns out, you are right now playing a very exciting game
of Join-K, and you have a tricky plan to ensure victory! When your
opponent is not looking, you are going to rotate the board 90 degrees
clockwise onto its side. Gravity will then cause the pieces to fall
down into a new position as shown below:
    - Start -
     .......
     .......
     .......
     ...R...
     ...RB..
     ..BRB..
     .RBBR..
   - Rotate -
     .......
     R......
     BB.....
     BRRR...
     RBB....
     .......
     .......
   - Gravity -
     .......
     .......
     .......
     R......
     BB.....
     BRR....
     RBBR...
Unfortunately, you only have time to rotate once before your opponent
will notice. All that remains is picking the right time to make your
move. Given a board position, you should determine which player (or
players!) will have K pieces in a row after you rotate the board
clockwise and gravity takes effect in the new direction. Notes
    You can rotate the board only once. Assume that gravity only takes
    effect after the board has been rotated completely. Only check for
    winners after gravity has finished taking effect.



def rotate(n,joink, inp):
    board = [['.' for i in range(n)] for j in range(n)]
    for i in range(n):
        for j in range(n):
            board[i][j] =  str(inp[i])[j]
 
    #For loop to apply gravity
    gravlist = []
    for i in range(len(board)):
        list1 = board[i]
        val = list1.count('.')
        for j in range(val):
            list1.remove('.')
        for k in range(val):
            list1.insert(k, '.')
        gravlist.append(list1)
 
    rotl = []
    #For loop to rotate the board
    for x in gravlist:
        rotl.append(x[::-1])
    for j in range(len(rotl)):
        print rotl[j]
       
    Red = False
    Blue = False
    #Check the horizontal values
    for i in range(len(rotl)):
        if 'R' * joink in (''.join(rotl[i])):
            Red = True
        elif 'B' * joink in (''.join(rotl[i])):
            Blue = True
 
    #Check the vertical values
    for i in range(len(rotl)):
        str1 = ''
        for j in range(len(rotl)):
            str1 = str1 + rotl[j][i]
            if 'R' * joink in (str1):
                Red = True
            elif 'B' * joink in (str1):
                Blue = True
 
    #Check the diagonal values
    for i in range(n):
        s = ''.join(rotl[i+j][0+j] for j in range(n-i))
        print s
        if 'B' * joink in s:
            Blue = True
        if 'R' * joink in s:
            Red = True
        s = ''.join(rotl[0+j][i+j] for j in range(n-i))
        if 'B' * joink in s:
            Blue = True
        if 'R' * joink in s:
            Red = True
         
        s = ''.join(rotl[0+j][i-j] for j in range(i+1))
        if 'B' * joink in s:
            Blue = True
        if 'R' * joink in s:
            Red = True
        s = ''.join(rotl[i+j][n-j-1] for j in range(n-i))
        if 'B' * joink in s:
            Blue = True
        if 'R' * joink in s:
            Red = True
 
 
    if (Red == True) and (Blue == True):
        return "Both"
    elif Red == True:
        return "Red"
    elif Blue == True:
        return "Blue"
    else:
        return "Neither"
 
 
if __name__ == '__main__':
    with open('A-small-practice.in', 'r') as fp:
        testcases = int(fp.readline())
        for tc in range(testcases):
            inp = []
            n, joink = (fp.readline()).split()
            for i in range(int(n)):
                inp.append(fp.readline())
            print "Case #%d: %s" % (tc+1, rotate(int(n), int(joink),inp))


Sample input:
4
7 3
.......
.......
.......
...R...
...BB..
..BRB..
.RRBR..
6 4
......
......
.R...R
.R..BB
.R.RBR
RB.BBB
4 4
R...
BR..
BR..
BR..
3 3
B..
RB.
RB.
Sample output:
Case #1: Neither
Case #2: Both
Case #3: Red
Case #4: Blue
