#On Unix computers, data is stored in directories. There is one root directory, and this might have several directories contained #inside of it, each with different names. These directories might have even more directories contained inside of them, and so on.
#A directory is uniquely identified by its name and its parent directory (the directory it is directly contained in). This is usually #encoded in a path, which consists of several parts each preceded by a forward slash ('/'). The final part is the name of the #directory, and everything else gives the path of its parent directory. For example, consider the path:
#/home/gcj/finals
#This refers to the directory with name "finals" in the directory described by "/home/gcj", which in turn refers to the directory with #name "gcj" in the directory described by the path "/home". In this path, there is only one part, which means it refers to the #directory with the name "home" in the root directory.
#To create a directory, you can use the mkdir command. You specify a path, and then mkdir will create the directory described by that #path, but only if the parent directory already exists. For example, if you wanted to create the "/home/gcj/finals" and #"/home/gcj/quals" directories from scratch, you would need four commands:
#mkdir /home
#mkdir /home/gcj
#mkdir /home/gcj/finals
#mkdir /home/gcj/quals
#Given the full set of directories already existing on your computer, and a set of new directories you want to create if they do not #already exist, how many mkdir commands do you need to use?
#Input
#The first line of the input gives the number of test cases, T. T test cases follow. Each case begins with a line containing two #integers N and M, separated by a space.
#The next N lines each give the path of one directory that already exists on your computer. This list will include every directory #already on your computer other than the root directory. (The root directory is on every computer, so there is no need to list it #explicitly.)
#The next M lines each give the path of one directory that you want to create.
#Each of the paths in the input is formatted as in the problem statement above. Specifically, a path consists of one or more #lower-case #alpha-numeric strings (i.e., strings containing only the symbols 'a'-'z' and '0'-'9'), each preceded by a single #forward slash. These #alpha-numeric strings are never empty.

def slash(str1):
    str1 = str1 + '/'
    return str1

def filefix(fold1, fold2):
    count = 0
    #Appending / to the existing folder name for checking with map function
    fold1 = map(slash, fold1)
    
    #Appending / to the existing folder name for checking with for loop
    # fold11 = []
    #for i in range(len(fold1)):
    #    print fold1[i]
    #    fold11.append(fold1[i] + '/')
    
    for each in fold2:
        fold = '/'
        for i in each.split('/'):
            if i != '':
                fold = fold + i + '/'
                if fold not in fold1:
                    fold1.append(fold)
                    count = count + 1                  
    return count            
        

if __name__ =='__main__':
    with open('sample_inp.in', 'r') as fp:
        tc = int(fp.readline())
        for i in range(tc):
            avail, crea = fp.readline().split()
            avail_fold = [fp.readline().strip('\n') for j in range(int(avail))]
            create_fold = [fp.readline().strip('\n') for k in range(int(crea))]
            print "Case #%d: %d" % (i+1, filefix(avail_fold, create_fold))
        
#Sample input:
#3
#0 2
#/home/gcj/finals
#/home/gcj/quals
#2 1
#/chicken
#/chicken/egg
#/chicken
#1 3
#/a
#/a/b
#/a/c
#/b/b

#sample output:
#Case #1: 4
#Case #2: 0
#Case #3: 4
